<AML>
 <Item type="Method" id="8D5C9705DC0740CC90DF9F64F5E253B8" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// This method is adapted from Method PE_GetMultilBom written for 
// IR-018441 MultiLevelBom view takes 2 minutes to load engine bom.
// It uses the technique of dropping curly braces to enable functions and classes to be declared
// in a Method, exploiting the way InnovataorServer compiles Methods using Method Templates.
// In this case there are two closing curly brace at the end of the main Method code,
// just above the start of the declaration of DictsForMultiBom class
// and two unclosed curly braces at the end of the method

// This version is adapted to get xml to populate UserStory multi level grid
		
//if (!String.Equals(this.getType(), "UserStory", StringComparison.Ordinal))
		//    return inn.newError("Item of type UserStory required");
		

		Innovator inn = this.getInnovator();
		string partId =  /*"44E51285407E40F88B560188B83B6392"; //*/ this.getID();
		if (String.IsNullOrEmpty(partId))
		    return inn.newError("Part ID not specified");


/*
		Item callframe = inn.newItem("SQL", "SQL PROCESS");
		callframe.setProperty("name", "UserStory_GetCompleteBom1");
		callframe.setProperty("PROCESS", "CALL");
		callframe.setProperty("ARG1", partId);
		Item res=callframe.apply();
	
		string ss =HttpContext.Current.Request.MapPath("../Client/styles/default.xsl");
		return res;
	*	return inn.newError(res.applyStylesheet("url",ss));

		
*/

		DictsForMultiBom dictOfData = new DictsForMultiBom();
		
		GetDataForParsing getDataForParsing = new GetDataForParsing(inn.getUserID(), this);
		getDataForParsing.SetDataToDict(dictOfData);
				
		GetMultiBom ret = new GetMultiBom(CCO);		
		string parsedData4Return = ret.GetCompleteBom(dictOfData);
		
		return inn.newResult(parsedData4Return);
	}
}

class DictsForMultiBom
{
	public Dictionary<string, List<InfoOfItem>> dictAllItems;
	public List<InfoOfItem> zeroLevelItems;
}

class InfoOfItem
{
	public string level;
	public string id;
	public string item_number;

	public string state;
	public string sort_order;

	public string lockedId;
	public string name;
	public string as_a;
	public string i_want_to;
	public string so_that;
}

class GetDataForParsing
{
	private string thisUserID;
	private Item item;
	
	public GetDataForParsing(string userId, Item part)
	{
		this.thisUserID = userId;
		this.item = part;
	}
	
	public void SetDataToDict(DictsForMultiBom dictOfData)
	{
		Dictionary<string, List<InfoOfItem>> dictItemProp = new Dictionary<string, List<InfoOfItem>>();
		List<InfoOfItem> zeroLevelItems = new List<InfoOfItem>();
		Item itemList = this.GetAllItems();
		
		int itemsCount = itemList.getItemCount();
		if (itemsCount == 0) return;
		
		for (int i = 0; i < itemsCount; i++)
		{
			Item itm =  itemList.getItemByIndex(i);
			InfoOfItem infoOfItem = new InfoOfItem();
			infoOfItem.level = itm.getProperty("level", "");
			infoOfItem.id = itm.getProperty("related_id", "");
			infoOfItem.item_number = itm.getProperty("related_item_number", "");
			//infoOfItem.revision = itm.getProperty("related_revision", "");
			infoOfItem.state = itm.getProperty("userstory_state", "");
			infoOfItem.sort_order = itm.getProperty("sort_order", "");
			//infoOfItem.quantity = itm.getProperty("quantity", "");
			string lockedBY = itm.getProperty("related_locked_by_id", "");
			if (lockedBY != "")
				infoOfItem.lockedId = (lockedBY == this.thisUserID) ? "&lt;img src=\"../images/LockedByMe.svg\" /&gt;" : "&lt;img src=\"../images/LockedByMe.svg\" /&gt;";
			else
				infoOfItem.lockedId = "<emptytag />";
			infoOfItem.name = itm.getProperty("related_name", "");
			infoOfItem.as_a = itm.getProperty("as_a", "");
			infoOfItem.i_want_to = itm.getProperty("i_want_to", "");
			infoOfItem.so_that = itm.getProperty("so_that", "");
						
			if (infoOfItem.level == "0") zeroLevelItems.Add(infoOfItem);
			
			string source_id = string.Empty;
			source_id = itm.getProperty("source_id", "");
			
			if (source_id == "") continue;
			
			List<InfoOfItem> dataOfItemList;
			
			dictItemProp.TryGetValue(source_id, out dataOfItemList);
			if (dataOfItemList != null)
			{
				dataOfItemList.Add(infoOfItem);
			}
			else
			{
				List<InfoOfItem> datList = new List<InfoOfItem>();
				datList.Add(infoOfItem);
				dictItemProp.Add(source_id, datList);
			}
		}
		
		dictOfData.dictAllItems = dictItemProp;
		dictOfData.zeroLevelItems = zeroLevelItems;
	}
	
	private Item GetAllItems()
	{
		Item callframe = item.newItem("SQL", "SQL PROCESS");
		callframe.setProperty("name", "UserStory_GetCompleteBom1");
		callframe.setProperty("PROCESS", "CALL");
		callframe.setProperty("ARG1", item.getID());

		return callframe.apply();
	}
}

class GetMultiBom
{
	private const String InnovatorCCOUID = "PE_GetRelatedParts_InnovatorCCO";
	
	public GetMultiBom(Aras.Server.Core.CallContext CCO)
	{
		HttpContext.Current.Items[InnovatorCCOUID] = CCO;
	}
	
	private Aras.Server.Core.CallContext GetCCO()
	{
		return (Aras.Server.Core.CallContext)HttpContext.Current.Items[InnovatorCCOUID];
	}
	
	public string GetCompleteBom(DictsForMultiBom dictOfData)
	{
		Dictionary<string, List<InfoOfItem>> dictAllItems = dictOfData.dictAllItems;
		List<InfoOfItem> zeroLevelItems = dictOfData.zeroLevelItems;
		
		StringBuilder itemStylesheet = new StringBuilder();
		this.GetBaseTamplate(itemStylesheet);
		
		if (dictAllItems != null && dictAllItems.Count != 0)
		{
			foreach(InfoOfItem parentItem in zeroLevelItems)
			{
				this.GetParsedData(parentItem, 0, itemStylesheet, dictAllItems);
			}
		}
		itemStylesheet.Append("</table>");
		return itemStylesheet.ToString();
	}
	
	private string Escape(string data)
	{
		return System.Security.SecurityElement.Escape(data);
	}
	
	private void GetParsedData(InfoOfItem iof, int level, StringBuilder itemStylesheet, Dictionary<string, List<InfoOfItem>> dictAllItems)
	{
		List<InfoOfItem> dataOfItemList;
		if (level.ToString() != iof.level) return;
		itemStylesheet.Append("<tr level=\"");
		itemStylesheet.Append(Escape(iof.level));
		itemStylesheet.Append("\" icon0=\"../images/UserStory.svg\" icon1=\"../images/Part.svg\"><userdata key=\"gridData_rowItemID\" value=\"");
		itemStylesheet.Append(Escape(iof.id));
		itemStylesheet.Append("\" /><td>");
		itemStylesheet.Append(Escape(iof.item_number));
		itemStylesheet.Append("</td><td>");

		itemStylesheet.Append(Escape(iof.name));
		itemStylesheet.Append("</td><td>");
		itemStylesheet.Append(Escape(iof.state));
		itemStylesheet.Append("</td><td>");
		itemStylesheet.Append(Escape(iof.sort_order));
		itemStylesheet.Append("</td><td>");

/*
		itemStylesheet.Append(iof.lockedId);
		itemStylesheet.Append("</td><td>");
*/
		itemStylesheet.Append(Escape(iof.as_a));
		itemStylesheet.Append("</td><td>");
		itemStylesheet.Append(Escape(iof.i_want_to));
		itemStylesheet.Append("</td><td>");
		itemStylesheet.Append(Escape(iof.so_that));
		itemStylesheet.Append("</td>");
		level++;
		if (dictAllItems.TryGetValue(iof.id, out dataOfItemList))
		{
			foreach (InfoOfItem childBom in dataOfItemList)
				GetParsedData(childBom, level, itemStylesheet, dictAllItems);
		}
		
		itemStylesheet.Append("</tr>");
	}
	
	private void GetBaseTamplate(StringBuilder gridStyle)
	{
		Aras.Server.Core.CallContext CCO = this.GetCCO();
		//gridStyle.Append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
		gridStyle.Append("<table");
		gridStyle.Append(" font=\"Microsoft Sans Serif-8\"");
		gridStyle.Append(" sel_bgColor=\"steelbue\"");
		gridStyle.Append(" sel_TextColor=\"white\"");
		gridStyle.Append(" header_BgColor=\"buttonface\"");
		gridStyle.Append(" expandroot=\"true\"");
		gridStyle.Append(" expandall=\"false\"");
		gridStyle.Append(" treelines=\"1\"");
		gridStyle.Append(" editable=\"false\"");
		gridStyle.Append(" draw_grid=\"true\"");
		gridStyle.Append(" multiselect=\"true\"");
		gridStyle.Append(" column_draggable=\"true\"");
		gridStyle.Append(" enableHtml=\"false\"");
		gridStyle.Append(" enterAsTab=\"false\"");
		gridStyle.Append(" bgInvert=\"true\"");
		gridStyle.Append(" xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"");
		gridStyle.Append(" xmlns:aras=\"http://www.aras.com\"");
		gridStyle.Append(" xmlns:usr=\"urn:the-xml-files:xslt\">");
		gridStyle.Append(" <thead>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "item_number").GetAttribute("label") + "</th>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "name").GetAttribute("label") + "</th>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "userstory_state").GetAttribute("label") + "</th>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("082592BB00324D6D8D4CFFC3D07578B6", "sort_order").GetAttribute("label") + "</th>");
//		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "locked_by_id").GetAttribute("label") + "</th>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "as_a").GetAttribute("label") + "</th>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "i_want_to").GetAttribute("label") + "</th>");
		gridStyle.Append("  <th align=\"c\">" + CCO.Cache.GetPropertyFromCache("D70CE8262D64418CBC6106FBA1BFA8C1", "so_that").GetAttribute("label") + "</th>");
		gridStyle.Append(" </thead>");
		gridStyle.Append(" <columns>");
		gridStyle.Append("  <column width=\"100\" edit=\"NOEDIT\"  align=\"l\" order=\"0\" />");
		gridStyle.Append("  <column width=\"200\"  edit=\"NOEDIT\"  align=\"l\" order=\"1\" />");
		gridStyle.Append("  <column width=\"60\"  edit=\"NOEDIT\"  align=\"c\" order=\"2\" />");
		gridStyle.Append("  <column width=\"70\"  edit=\"NOEDIT\"  align=\"c\" order=\"3\" sorttype=\"numeric\"/>");
//		gridStyle.Append("  <column width=\"0\"  edit=\"NOEDIT\"  align=\"c\" order=\"4\" />");
		gridStyle.Append("  <column width=\"80\" edit=\"NOEDIT\"  align=\"l\" order=\"4\" />");
		gridStyle.Append("  <column width=\"200\" edit=\"NOEDIT\"  align=\"l\" order=\"5\" />");
		gridStyle.Append("  <column width=\"200\" edit=\"NOEDIT\"  align=\"l\" order=\"6\" />");
		gridStyle.Append(" </columns>");
		gridStyle.Append(" <menu>");
		gridStyle.Append(" 	<emptytag/>");
		gridStyle.Append(" </menu>");
	]]></method_code>
  <method_type>C#</method_type>
  <name>UserStory_GetMultilBom2</name>
 </Item>
</AML>